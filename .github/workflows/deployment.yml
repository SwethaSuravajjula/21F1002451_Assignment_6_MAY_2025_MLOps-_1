name: Deploy to GKE
on:
  push:
    branches:
      - master

env:
  PROJECT_ID: fourth-scheme-461516-n2
  GAR_LOCATION: us-west1
  REPO_NAME: repo
  IMAGE_NAME: iris-api
  CLUSTER_NAME: gke-cluster-iris
  CLUSTER_ZONE: us-west1
  DEPLOYMENT_NAME: iris-deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up gcloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Authenticate and Set up GKE Auth Plugin
      env:
        GCP_CREDENTIALS_B64: ${{ secrets.GCP_SA_KEYS }}
      run: |
        gcloud components install gke-gcloud-auth-plugin
        echo "$GCP_CREDENTIALS_B64" | base64 -d > gcp-key.json
        gcloud auth activate-service-account --key-file=gcp-key.json
        gcloud config set project ${{ env.PROJECT_ID }}

    # --- NEW STEP ADDED HERE ---
    - name: Create Artifact Registry repository if it doesn't exist
      run: |
        # First, try to describe the repository. If it exists, this command succeeds (exit code 0).
        # If it doesn't exist, the command fails (non-zero exit code).
        # We suppress all output with >/dev/null 2>&1 to keep the logs clean.
        if ! gcloud artifacts repositories describe ${{ env.REPO_NAME }} --location=${{ env.GAR_LOCATION }} >/dev/null 2>&1; then
          echo "Artifact Registry repository '${{ env.REPO_NAME }}' not found. Creating it..."
          gcloud artifacts repositories create ${{ env.REPO_NAME }} \
            --repository-format=docker \
            --location=${{ env.GAR_LOCATION }} \
            --description="Docker repository for CI/CD"
        else
          echo "Artifact Registry repository '${{ env.REPO_NAME }}' already exists."
        fi

    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

    - name: Build and Tag Docker image
      run: |
        docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest .

    - name: Push Docker image to Artifact Registry
      run: |
        docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Get GKE cluster credentials
      run: |
        gcloud container clusters get-credentials ${{ env.CLUSTER_NAME }} --zone ${{ env.CLUSTER_ZONE }}

    - name: Deploy to GKE
      run: |
        IMAGE_URL="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest"
        # Update the image placeholder in the deployment file
        sed -i "s|IMAGE_PLACEHOLDER|$IMAGE_URL|g" k8/deployement.yml
        
        # CORRECTED: Apply all manifest files in the k8s directory
        kubectl apply -f k8/

    - name: Run smoke test on live endpoint
      run: |
        echo "Waiting for external IP address..."
        # Loop for up to 5 minutes (20 attempts * 15 seconds) waiting for the IP
        for i in {1..20}; do
          # Use jsonpath to directly query for the IP. It's more reliable than parsing text.
          IP_ADDRESS=$(kubectl get service iris-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -n "$IP_ADDRESS" ]; then
            echo "External IP found: $IP_ADDRESS"
            break
          fi
          echo "Attempt $i/20: IP not available yet. Waiting 15 seconds..."
          sleep 15
        done

        if [ -z "$IP_ADDRESS" ]; then
          echo "Error: Failed to get external IP address for iris-service after 5 minutes."
          # Print final service status for debugging
          kubectl describe service iris-service
          exit 1
        fi
        
        echo "Running curl test against /predict/ endpoint..."
        # Run the curl command and check the output for the expected prediction.
        # The 'grep' command will fail the step if "setosa" is not in the response.
        curl -s -X 'POST' "http://$IP_ADDRESS/predict/" \
          -H 'Content-Type: application/json' \
          -d '{"sepal_length": 5.1, "sepal_width": 3.5, "petal_length": 1.4, "petal_width": 0.2}' \
          | grep '"prediction_class":"setosa"'
          
        echo "Smoke test passed!"
